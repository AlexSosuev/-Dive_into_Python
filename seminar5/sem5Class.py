# Пользователь вводит строку из четырёх или более целых чисел, разделённых символом “/”. Сформируйте словарь, где: ✔второе и третье число являются ключами. ✔первое число является значением для первого ключа. ✔четвертое и все возможные последующие числа        хранятся в кортеже как значения второго ключа.

# a, b, c, *d = list(map(int, input('Введите числа серез слеш').split('/')))
# print(my_dict := {b: a, c: d})

# ✔ Самостоятельно сохраните в переменной строку текста.
# ✔ Создайте из строки словарь, где ключ — буква, а значение — код буквы.
# ✔ Напишите преобразование в одну строку. 
# ✔ Возьмите словарь, который вы получили. Сохраните его итераторатор.
# ✔ Далее выведите первые 5 пар ключ-значение, обращаясь к итератору, а не к словарю.

# text = "Hello, world!" 
# dictionary = {char: ord(char) for char in text} 
# print(dictionary)
# iterator = iter(dictionary.items())  
# for _ in range(5):
#     print(next(iterator))

# ✔ Создайте генератор чётных чисел от нуля до 100.
# ✔ Из последовательности исключите числа, сумма цифр которых равна 8.
# ✔ Решение в одну строку.

# even_numbers = (num for num in range(0, 101, 2) if sum(int(digit) for digit in str(num)) != 8)
# print(*even_numbers)

# ✔Напишите программу, которая выводит на экран числа от 1 до 100. ✔При этом вместо чисел, кратных трем, программа должна выводить слово «Fizz» ✔Вместо чисел, кратных пяти — слово «Buzz». ✔Если число кратно и 3, и 5, то программа должна выводить слово «FizzBuzz». ✔*Превратите решение в генераторное выражение.

# result = ('FizzBuzz' if num % 3 == 0 and num % 5 == 0 else 'Fizz' if num % 3 == 0 else 'Buzz' if num % 5 == 0 else num for num in range(1, 101))
# print(*result)

# ✔Выведите в консоль таблицу умножения от 2х2 до 9х10 как на школьной тетрадке. ✔Таблицу создайте в виде однострочного генератора, где каждый элемент генератора — отдельный пример таблицы умножения. ✔Для вывода результата используйте «принт» без перехода на новую строку.

# for  k in [0,4]:
#     for i in range (2, 11):
#         res = ''
#         for j in range(2 + k, 6 + k):
#             res += f'{j:^2} x {i:^2} = {i * j:^2}\t'
#         print(res)
#     print()

# print('\n\n'.join(['\n'.join(['\t'.join([f'{x:>2} x {y:>2} = {x*y:>3}' for x in range(2+k,6+k)]) for y in range(1,10)]) for k in [0,4]]))

# ✔Создайте функцию-генератор. ✔Функция генерирует N простых чисел, начиная с числа 2. ✔Для проверки числа на простоту используйте правило: «число является простым, если делится нацело только на единицу и на себя».

def simple_generator(limit: int):
    yield 2
    number = 3
    turn = 1
    while turn < limit:
        for dev in range(3, int(number ** 0.5) + 1, 2):
            if not number % dev:
                break
        else:
            yield number
            turn += 1
        number += 2

generator = simple_generator(10)
for prime in generator:
    print(prime, end=' ')
print()